{"version":3,"sources":["Components/dor.png","Components/Avtar.js","Components/Btn.js","Components/Txt.js","serviceWorker.js","Components/Msg.js","index.js"],"names":["module","exports","Avtar","props","name","dor","console","log","className","src","alt","height","width","Btn","useState","nm","setNm","onClick","Txt","inpt","setInpt","style","display","justifyContent","alignItems","type","id","placeholder","value","onChange","e","target","Boolean","window","location","hostname","match","Msg","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"0FAAAA,EAAOC,QAAU,IAA0B,iC,yOC2B5BC,MAtBf,SAAeC,GACb,IAAIC,EAIJ,OAHuBA,EAAJ,KAAfD,EAAMC,KAAoBC,IAClB,+BAAiCF,EAAMC,KACnDE,QAAQC,IAAIH,GAEV,yBAAKI,UAAU,WACb,gCACE,yBAAKA,UAAU,iBACb,yBACEC,IAAKL,EACLM,IAAKL,IACLG,UAAU,SACVG,OAAO,SACPC,MAAM,eCSHC,MAzBf,SAAaV,GAAQ,IAAD,EACDW,mBAAS,IADR,mBACbC,EADa,KACVC,EADU,KAElB,OACE,6BACE,yBAAKR,UAAU,OACb,6BACA,kBAAC,EAAD,CAAOJ,KAAMW,IACb,gCACE,6BACA,4BACEP,UAAU,yBACVS,QAAS,WACPD,EAAMb,EAAMC,MACZE,QAAQC,IAAIJ,EAAMC,QAJtB,WCyBKc,MAjCf,WAAgB,IAAD,EACUJ,mBAAS,IADnB,mBACNK,EADM,KACDC,EADC,KAEb,OACE,yBAAKZ,UAAU,SACb,gCACE,6BACA,yBACEA,UAAU,kBACVa,MAAO,CACLC,QAAS,OACTC,eAAgB,SAChBC,WAAY,WAGd,yBAAKhB,UAAU,YACb,2BACEiB,KAAK,OACLC,GAAG,KACHlB,UAAU,eACVmB,YAAY,OACZC,MAAQT,EACRU,SAAW,SAAAC,GAAMV,EAAQU,EAAEC,OAAOH,OAChCtB,QAAQC,IAAIuB,EAAEC,OAAOH,UAGzB,kBAAC,EAAD,CAAKxB,KAAMe,SCjBHa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCHSC,MAXf,WACE,OACE,yBAAK7B,UAAU,SACb,gCACE,6BACA,wBAAIA,UAAU,OAAd,gDCHR8B,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,OAEFC,SAASC,eAAe,SFwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5C,QAAQ4C,MAAMA,EAAMC,c","file":"static/js/main.9705add5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/dor.43200e89.png\";","import React from \"react\";\r\nimport \"./Avtar.css\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport dor from \"./dor.png\";\r\n\r\nfunction Avtar(props) {\r\n  var name;\r\n  if (props.name === \"\") name = dor;\r\n  else name = \"https://joeschmoe.io/api/v1/\" + props.name;\r\n  console.log(name);\r\n  return (\r\n    <div className=\"effect5\">\r\n      <center>\r\n        <div className=\"blk img-fluid\">\r\n          <img\r\n            src={name}\r\n            alt={dor}\r\n            className=\"Avtimg\"\r\n            height=\"250rem\"\r\n            width=\"250rem\"\r\n          />\r\n        </div>\r\n      </center>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Avtar;\r\n","import React, {useState} from \"react\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport Avtar from \"./Avtar\";\r\nfunction Btn(props) {\r\n  var [nm,setNm] = useState(\"\");\r\n  return (\r\n    <div>\r\n      <div className=\"Btn\">\r\n        <br />\r\n        <Avtar name={nm} />\r\n        <center>\r\n          <br />\r\n          <button\r\n            className=\"btn btn-primary btn-lg\"\r\n            onClick={() => {\r\n              setNm(props.name);\r\n              console.log(props.name);\r\n            }}\r\n          >\r\n            Get\r\n          </button>\r\n        </center>\r\n      </div>\r\n      \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Btn;\r\n","import React,{useState} from \"react\";\r\nimport \"./Txtcs.css\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport Btn from \"./Btn\";\r\nfunction Txt() {\r\n  const [inpt,setInpt] = useState(\"\");\r\n  return (\r\n    <div className=\"Txtcs\">\r\n      <center>\r\n        <br />\r\n        <div\r\n          className=\"form-group row \"\r\n          style={{\r\n            display: \"flex\",\r\n            justifyContent: \"center\",\r\n            alignItems: \"center\",\r\n          }}\r\n        >\r\n          <div className=\"col-lg-3\">\r\n            <input\r\n              type=\"text\"\r\n              id=\"nm\"\r\n              className=\"form-control\"\r\n              placeholder=\"Name\"\r\n              value ={inpt}\r\n              onChange ={e => {setInpt(e.target.value)\r\n                console.log(e.target.value);\r\n              }}\r\n            />\r\n            <Btn name={inpt}/>\r\n          </div>\r\n        </div>\r\n      </center>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Txt;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport \"./Msg.css\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nfunction Msg() {\r\n  return (\r\n    <div className=\"Txtcs\">\r\n      <center>\r\n        <br></br>\r\n        <h5 className=\"txt\">Enter your name to get matching character</h5>\r\n      </center>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Msg;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Txt from \"./Components/Txt\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport Msg from \"./Components/Msg\";\nReactDOM.render(\n  <React.StrictMode>\n    <Msg />\n    <Txt />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}